version: '3.8'

services:
  # Main application service
  claude-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: claude-manager-app
    ports:
      - "5000:5000"
      - "8000:8000"  # Alternative port
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=sqlite:///data/tasks.db
      - ENABLE_PERFORMANCE_MONITORING=true
      - ENABLE_ENHANCED_SECURITY=true
    env_file:
      - .env
    volumes:
      - .:/app:cached
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./backups:/app/backups
    depends_on:
      - redis
      - postgres
    networks:
      - claude-manager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: claude-manager-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - claude-manager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    container_name: claude-manager-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: claude_manager
      POSTGRES_USER: claude_user
      POSTGRES_PASSWORD: claude_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - claude-manager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_user -d claude_manager"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-manager-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - claude-manager-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: claude-manager-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - claude-manager-network
    restart: unless-stopped

  # Nginx for reverse proxy and load balancing
  nginx:
    image: nginx:alpine
    container_name: claude-manager-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - claude-manager
    networks:
      - claude-manager-network
    restart: unless-stopped

  # Testing service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: claude-manager-tests
    volumes:
      - .:/app:cached
      - ./test-results:/app/test-results
    environment:
      - TESTING=true
      - DATABASE_URL=sqlite:///:memory:
    profiles:
      - testing
    networks:
      - claude-manager-network

  # Security scanner service
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile
      target: security
    container_name: claude-manager-security
    volumes:
      - ./security-reports:/app/security-reports
    profiles:
      - security
    networks:
      - claude-manager-network

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  claude-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16