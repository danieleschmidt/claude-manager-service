version: '3.8'

services:
  # Production application service
  claude-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-unknown}
    image: claude-manager:${VERSION:-latest}
    container_name: claude-manager-prod
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://claude_user:${POSTGRES_PASSWORD}@postgres:5432/claude_manager
      - REDIS_URL=redis://redis:6379/0
      - ENABLE_PERFORMANCE_MONITORING=true
      - ENABLE_ENHANCED_SECURITY=true
      - MONITORING_METRICS_PORT=9090
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claude-manager-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.claude-manager.rule=Host(`claude-manager.local`)"
      - "traefik.http.services.claude-manager.loadbalancer.server.port=5000"

  # Production Redis with clustering
  redis:
    image: redis:7-alpine
    container_name: claude-manager-redis-prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - claude-manager-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Production PostgreSQL with replication ready
  postgres:
    image: postgres:15-alpine
    container_name: claude-manager-postgres-prod
    environment:
      POSTGRES_DB: claude_manager
      POSTGRES_USER: claude_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/production-init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups/postgres:/var/backups
    networks:
      - claude-manager-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_user -d claude_manager"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Prometheus for production metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-manager-prometheus-prod
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - claude-manager-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Grafana for production dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: claude-manager-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - claude-manager-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: claude-manager-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - claude-manager
    networks:
      - claude-manager-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log aggregation service
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: claude-manager-fluentd
    volumes:
      - ./monitoring/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/claude-manager:ro
    networks:
      - claude-manager-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: claude-manager-backup
    environment:
      POSTGRES_DB: claude_manager
      POSTGRES_USER: claude_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - claude-manager-network
    restart: unless-stopped
    command: /backup.sh
    profiles:
      - backup

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-manager/redis
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-manager/postgres
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-manager/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-manager/grafana

networks:
  claude-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16