name: Release Automation

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  # Determine release version
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install semantic release
        run: |
          pip install python-semantic-release

      - name: Determine new version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Analyze commits to determine release type
            RELEASE_TYPE=$(semantic-release print-version --noop || echo "patch")
          fi
          
          CURRENT_VERSION=$(grep version pyproject.toml | head -1 | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          echo "Release type: $RELEASE_TYPE"
          
          # Calculate new version
          NEW_VERSION=$(semantic-release print-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog for the new version
          semantic-release changelog --unreleased > CHANGELOG_NEW.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_NEW.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Build and test release artifacts
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          pip install --upgrade pip build wheel

      - name: Update version in files
        run: |
          VERSION=${{ needs.version.outputs.new_version }}
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" src/__init__.py

      - name: Build Python package
        run: python -m build

      - name: Build Docker image
        run: |
          docker build -t claude-code-manager:${{ needs.version.outputs.new_version }} .
          docker tag claude-code-manager:${{ needs.version.outputs.new_version }} claude-code-manager:latest

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
            *.whl
            *.tar.gz

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.version.outputs.new_version }}
          name: Release v${{ needs.version.outputs.new_version }}
          body: |
            ## What's Changed
            
            ${{ needs.version.outputs.changelog }}
            
            ## Installation
            
            ```bash
            pip install claude-code-manager==${{ needs.version.outputs.new_version }}
            ```
            
            ## Docker
            
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.new_version }}
            ```
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.version.outputs.old_version }}...v${{ needs.version.outputs.new_version }}
          artifacts: "dist/*"
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [version, release]
    environment:
      name: pypi
      url: https://pypi.org/project/claude-code-manager/
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Publish Docker images
  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [version, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.version.outputs.new_version }}
            ghcr.io/${{ github.repository }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/claude-code-manager:${{ needs.version.outputs.new_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/claude-code-manager:latest

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [version, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update version in docs
        run: |
          find docs -name "*.md" -type f -exec sed -i "s/claude-code-manager==.*/claude-code-manager==${{ needs.version.outputs.new_version }}/g" {} +
          find docs -name "*.md" -type f -exec sed -i "s/:v[0-9]\+\.[0-9]\+\.[0-9]\+/:v${{ needs.version.outputs.new_version }}/g" {} +

      - name: Create documentation PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: update version to ${{ needs.version.outputs.new_version }}'
          title: '[Auto] Update documentation for v${{ needs.version.outputs.new_version }}'
          body: |
            Updates documentation to reference version ${{ needs.version.outputs.new_version }}
          branch: auto-update/docs-${{ needs.version.outputs.new_version }}
          delete-branch: true

  # Announce release
  announce:
    name: Announce Release
    runs-on: ubuntu-latest
    needs: [version, release, publish-pypi, publish-docker]
    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "New Release: Claude Code Manager v${{ needs.version.outputs.new_version }}",
              attachments: [{
                color: 'good',
                fields: [
                  { title: 'Version', value: 'v${{ needs.version.outputs.new_version }}', short: true },
                  { title: 'PyPI', value: '<https://pypi.org/project/claude-code-manager/|Published>', short: true },
                  { title: 'Docker', value: '<https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/claude-code-manager|Published>', short: true },
                  { title: 'Release Notes', value: '<https://github.com/${{ github.repository }}/releases/tag/v${{ needs.version.outputs.new_version }}|View>', short: true }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create announcement issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üéâ Released v${{ needs.version.outputs.new_version }}`,
              body: `## Claude Code Manager v${{ needs.version.outputs.new_version }} has been released!
              
              ### üì¶ Installation
              - PyPI: \`pip install claude-code-manager==${{ needs.version.outputs.new_version }}\`
              - Docker: \`docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.new_version }}\`
              
              ### üìù Release Notes
              View the full release notes [here](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.version.outputs.new_version }})
              
              ### üôè Thank You
              Thank you to all contributors who made this release possible!`,
              labels: ['announcement', 'release']
            })