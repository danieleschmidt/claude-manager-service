#!/usr/bin/env python3
"""
Automation setup script for Claude Code Manager.
Sets up cron jobs, systemd services, and automation tasks.
"""

import os
import stat
import subprocess
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional


def check_system_requirements() -> Dict[str, bool]:
    """Check if required system components are available."""
    print("üîç Checking system requirements...")
    
    requirements = {
        "python3": False,
        "cron": False,
        "systemctl": False,
        "git": False,
    }
    
    # Check Python 3
    try:
        result = subprocess.run(
            ["python3", "--version"], capture_output=True, text=True
        )
        if result.returncode == 0:
            requirements["python3"] = True
            print(f"   ‚úÖ Python 3: {result.stdout.strip()}")
    except FileNotFoundError:
        print("   ‚ùå Python 3: Not found")
    
    # Check cron
    try:
        result = subprocess.run(
            ["which", "crontab"], capture_output=True, text=True
        )
        if result.returncode == 0:
            requirements["cron"] = True
            print("   ‚úÖ Cron: Available")
    except FileNotFoundError:
        print("   ‚ùå Cron: Not found")
    
    # Check systemctl
    try:
        result = subprocess.run(
            ["which", "systemctl"], capture_output=True, text=True
        )
        if result.returncode == 0:
            requirements["systemctl"] = True
            print("   ‚úÖ Systemctl: Available")
    except FileNotFoundError:
        print("   ‚ùå Systemctl: Not found")
    
    # Check Git
    try:
        result = subprocess.run(
            ["git", "--version"], capture_output=True, text=True
        )
        if result.returncode == 0:
            requirements["git"] = True
            print(f"   ‚úÖ Git: {result.stdout.strip()}")
    except FileNotFoundError:
        print("   ‚ùå Git: Not found")
    
    return requirements


def create_automation_scripts() -> bool:
    """Create automation scripts for various tasks."""
    print("\nüìÑ Creating automation scripts...")
    
    scripts_dir = Path("automation")
    scripts_dir.mkdir(exist_ok=True)
    
    # Daily metrics collection script
    daily_metrics_script = scripts_dir / "daily-metrics.sh"
    daily_metrics_content = '''#!/bin/bash
# Daily metrics collection script
# Auto-generated by Claude Code Manager

set -e

CD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$CD_DIR")"

echo "[$(date)] Starting daily metrics collection..."
cd "$PROJECT_DIR"

# Collect metrics
python3 scripts/collect-metrics.py

# Run health checks
if [ -f "scripts/health-check.py" ]; then
    python3 scripts/health-check.py
fi

# Clean old metrics (keep last 30 days)
find performance_data/ -name "metrics_*.json" -mtime +30 -delete 2>/dev/null || true

echo "[$(date)] Daily metrics collection completed"
'''
    
    with open(daily_metrics_script, "w") as f:
        f.write(daily_metrics_content)
    daily_metrics_script.chmod(0o755)
    print(f"   ‚úÖ Created: {daily_metrics_script}")
    
    # Weekly maintenance script
    weekly_maintenance_script = scripts_dir / "weekly-maintenance.sh"
    weekly_maintenance_content = '''#!/bin/bash
# Weekly maintenance script
# Auto-generated by Claude Code Manager

set -e

CD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$CD_DIR")"

echo "[$(date)] Starting weekly maintenance..."
cd "$PROJECT_DIR"

# Update dependencies (check only)
echo "Checking for dependency updates..."
if [ -f "requirements.txt" ]; then
    pip list --outdated --format=json > /tmp/outdated_packages.json 2>/dev/null || true
fi

# Clean up temporary files
echo "Cleaning temporary files..."
find . -name "*.pyc" -delete 2>/dev/null || true
find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true

# Clean Docker if available
if command -v docker &> /dev/null; then
    echo "Cleaning Docker resources..."
    docker system prune -f --volumes 2>/dev/null || true
fi

# Rotate logs
if [ -d "logs" ]; then
    echo "Rotating logs..."
    find logs/ -name "*.log" -mtime +7 -delete 2>/dev/null || true
fi

# Generate maintenance report
echo "[$(date)] Weekly maintenance completed" >> logs/maintenance.log

echo "[$(date)] Weekly maintenance completed"
'''
    
    with open(weekly_maintenance_script, "w") as f:
        f.write(weekly_maintenance_content)
    weekly_maintenance_script.chmod(0o755)
    print(f"   ‚úÖ Created: {weekly_maintenance_script}")
    
    # Backup script
    backup_script = scripts_dir / "backup-data.sh"
    backup_content = '''#!/bin/bash
# Data backup script
# Auto-generated by Claude Code Manager

set -e

CD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$CD_DIR")"
BACKUP_DIR="$PROJECT_DIR/backups"

echo "[$(date)] Starting data backup..."
cd "$PROJECT_DIR"

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Backup configuration
echo "Backing up configuration..."
tar -czf "$BACKUP_DIR/config_$(date +%Y%m%d_%H%M%S).tar.gz" \
    config.json .env.example *.ini *.toml 2>/dev/null || true

# Backup data directory
if [ -d "data" ]; then
    echo "Backing up data directory..."
    tar -czf "$BACKUP_DIR/data_$(date +%Y%m%d_%H%M%S).tar.gz" data/ 2>/dev/null || true
fi

# Backup metrics
if [ -d "performance_data" ]; then
    echo "Backing up performance data..."
    tar -czf "$BACKUP_DIR/metrics_$(date +%Y%m%d_%H%M%S).tar.gz" performance_data/ 2>/dev/null || true
fi

# Clean old backups (keep last 14 days)
find "$BACKUP_DIR" -name "*.tar.gz" -mtime +14 -delete 2>/dev/null || true

echo "[$(date)] Data backup completed"
echo "Backup location: $BACKUP_DIR"
'''
    
    with open(backup_script, "w") as f:
        f.write(backup_content)
    backup_script.chmod(0o755)
    print(f"   ‚úÖ Created: {backup_script}")
    
    # Health check script
    health_check_script = scripts_dir / "health-check.sh"
    health_check_content = '''#!/bin/bash
# System health check script
# Auto-generated by Claude Code Manager

set -e

CD_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$CD_DIR")"

echo "[$(date)] Starting health check..."
cd "$PROJECT_DIR"

# Check disk space
echo "Checking disk space..."
df -h . | tail -1 | awk \'{
    usage = substr($5, 1, length($5)-1)
    if (usage > 90) {
        print "WARNING: Disk usage is " usage "%"
        exit 1
    } else {
        print "OK: Disk usage is " usage "%"
    }
}\'

# Check if main application is responsive
if [ -f "src/health_check.py" ]; then
    echo "Checking application health..."
    python3 src/health_check.py || echo "WARNING: Application health check failed"
fi

# Check Docker containers if available
if command -v docker &> /dev/null && [ -f "docker-compose.yml" ]; then
    echo "Checking Docker containers..."
    docker-compose ps | grep -v "Exit 0" | grep "Exit" && echo "WARNING: Some containers exited" || echo "OK: All containers running"
fi

# Check log file sizes
if [ -d "logs" ]; then
    echo "Checking log sizes..."
    find logs/ -name "*.log" -size +100M -exec echo "WARNING: Large log file: {}" \; 2>/dev/null || true
fi

echo "[$(date)] Health check completed"
'''
    
    with open(health_check_script, "w") as f:
        f.write(health_check_content)
    health_check_script.chmod(0o755)
    print(f"   ‚úÖ Created: {health_check_script}")
    
    return True


def setup_cron_jobs(requirements: Dict[str, bool]) -> bool:
    """Set up cron jobs for automation."""
    print("\n‚è∞ Setting up cron jobs...")
    
    if not requirements["cron"]:
        print("   ‚ùå Cron not available, skipping cron job setup")
        return False
    
    # Get current directory
    current_dir = os.getcwd()
    
    cron_jobs = [
        # Daily metrics collection at 2 AM
        f"0 2 * * * cd {current_dir} && ./automation/daily-metrics.sh >> logs/cron.log 2>&1",
        
        # Weekly maintenance on Sundays at 3 AM
        f"0 3 * * 0 cd {current_dir} && ./automation/weekly-maintenance.sh >> logs/cron.log 2>&1",
        
        # Daily backup at 1 AM
        f"0 1 * * * cd {current_dir} && ./automation/backup-data.sh >> logs/cron.log 2>&1",
        
        # Health check every 6 hours
        f"0 */6 * * * cd {current_dir} && ./automation/health-check.sh >> logs/cron.log 2>&1",
    ]
    
    # Create cron configuration file
    cron_file = Path("automation/crontab.txt")
    with open(cron_file, "w") as f:
        f.write("# Claude Code Manager - Automated Tasks\n")
        f.write("# Generated automatically - do not edit manually\n\n")
        for job in cron_jobs:
            f.write(job + "\n")
    
    print(f"   ‚úÖ Cron configuration saved to: {cron_file}")
    
    # Show installation instructions
    print("\n   üìù To install cron jobs, run:")
    print(f"      crontab {cron_file}")
    print("\n   üìù To view current cron jobs:")
    print("      crontab -l")
    print("\n   üìù To remove all cron jobs:")
    print("      crontab -r")
    
    return True


def create_systemd_services(requirements: Dict[str, bool]) -> bool:
    """Create systemd service files for automation."""
    print("\nüõ†Ô∏è Creating systemd service templates...")
    
    if not requirements["systemctl"]:
        print("   ‚ùå Systemctl not available, creating templates only")
    
    systemd_dir = Path("automation/systemd")
    systemd_dir.mkdir(exist_ok=True)
    
    current_dir = os.getcwd()
    user = os.getenv("USER", "claude-manager")
    
    # Metrics collection service
    metrics_service = systemd_dir / "claude-manager-metrics.service"
    metrics_service_content = f'''[Unit]
Description=Claude Code Manager - Metrics Collection
After=network.target

[Service]
Type=oneshot
User={user}
WorkingDirectory={current_dir}
ExecStart={current_dir}/automation/daily-metrics.sh
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
'''
    
    with open(metrics_service, "w") as f:
        f.write(metrics_service_content)
    print(f"   ‚úÖ Created: {metrics_service}")
    
    # Metrics collection timer
    metrics_timer = systemd_dir / "claude-manager-metrics.timer"
    metrics_timer_content = '''[Unit]
Description=Claude Code Manager - Daily Metrics Collection Timer
Requires=claude-manager-metrics.service

[Timer]
OnCalendar=daily
RandomizedDelaySec=30m
Persistent=true

[Install]
WantedBy=timers.target
'''
    
    with open(metrics_timer, "w") as f:
        f.write(metrics_timer_content)
    print(f"   ‚úÖ Created: {metrics_timer}")
    
    # Health check service
    health_service = systemd_dir / "claude-manager-health.service"
    health_service_content = f'''[Unit]
Description=Claude Code Manager - Health Check
After=network.target

[Service]
Type=oneshot
User={user}
WorkingDirectory={current_dir}
ExecStart={current_dir}/automation/health-check.sh
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
'''
    
    with open(health_service, "w") as f:
        f.write(health_service_content)
    print(f"   ‚úÖ Created: {health_service}")
    
    # Health check timer
    health_timer = systemd_dir / "claude-manager-health.timer"
    health_timer_content = '''[Unit]
Description=Claude Code Manager - Health Check Timer
Requires=claude-manager-health.service

[Timer]
OnCalendar=*:0/15  # Every 15 minutes
Persistent=true

[Install]
WantedBy=timers.target
'''
    
    with open(health_timer, "w") as f:
        f.write(health_timer_content)
    print(f"   ‚úÖ Created: {health_timer}")
    
    # Installation script
    install_script = systemd_dir / "install-services.sh"
    install_script_content = f'''#!/bin/bash
# Install Claude Code Manager systemd services
# Run with sudo privileges

set -e

SERVICE_DIR="{current_dir}/automation/systemd"
SYSTEM_DIR="/etc/systemd/system"

echo "Installing Claude Code Manager systemd services..."

# Copy service files
sudo cp "$SERVICE_DIR"/*.service "$SERVICE_DIR"/*.timer "$SYSTEM_DIR/"

# Reload systemd
sudo systemctl daemon-reload

# Enable and start timers
sudo systemctl enable claude-manager-metrics.timer
sudo systemctl enable claude-manager-health.timer

sudo systemctl start claude-manager-metrics.timer
sudo systemctl start claude-manager-health.timer

echo "Services installed and started successfully!"
echo ""
echo "Check status with:"
echo "  sudo systemctl status claude-manager-metrics.timer"
echo "  sudo systemctl status claude-manager-health.timer"
echo ""
echo "View logs with:"
echo "  sudo journalctl -u claude-manager-metrics.service"
echo "  sudo journalctl -u claude-manager-health.service"
'''
    
    with open(install_script, "w") as f:
        f.write(install_script_content)
    install_script.chmod(0o755)
    print(f"   ‚úÖ Created: {install_script}")
    
    if requirements["systemctl"]:
        print("\n   üìù To install systemd services, run:")
        print(f"      sudo {install_script}")
    
    return True


def create_monitoring_setup() -> bool:
    """Create monitoring and alerting setup."""
    print("\nüìä Creating monitoring setup...")
    
    monitoring_dir = Path("automation/monitoring")
    monitoring_dir.mkdir(exist_ok=True)
    
    # Prometheus configuration for metrics collection
    prometheus_config = monitoring_dir / "prometheus-automation.yml"
    prometheus_content = '''# Prometheus configuration for automation metrics
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  # Node exporter for system metrics
  - job_name: \'automation-node\'
    static_configs:
      - targets: [\'localhost:9100\']
    scrape_interval: 10s
  
  # Application metrics
  - job_name: \'automation-app\'
    static_configs:
      - targets: [\'localhost:5000\']
    metrics_path: /api/metrics
    scrape_interval: 30s
  
  # Custom metrics from automation scripts
  - job_name: \'automation-metrics\'
    file_sd_configs:
      - files:
          - \'automation/monitoring/targets.json\'
    scrape_interval: 60s

rule_files:
  - "automation/monitoring/alerts.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093
'''
    
    with open(prometheus_config, "w") as f:
        f.write(prometheus_content)
    print(f"   ‚úÖ Created: {prometheus_config}")
    
    # Alert rules for automation
    alert_rules = monitoring_dir / "alerts.yml"
    alert_content = '''groups:
  - name: automation-alerts
    rules:
      - alert: AutomationScriptFailure
        expr: automation_script_success == 0
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "Automation script failed"
          description: "Automation script {{ $labels.script }} has failed"
      
      - alert: HighDiskUsage
        expr: automation_disk_usage_percent > 90
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High disk usage detected"
          description: "Disk usage is {{ $value }}%"
      
      - alert: OldBackupFiles
        expr: automation_backup_age_days > 7
        for: 1h
        labels:
          severity: warning
        annotations:
          summary: "Backup files are getting old"
          description: "Latest backup is {{ $value }} days old"
'''
    
    with open(alert_rules, "w") as f:
        f.write(alert_content)
    print(f"   ‚úÖ Created: {alert_rules}")
    
    # Targets configuration
    targets_config = monitoring_dir / "targets.json"
    targets_content = '''[
  {
    "targets": ["localhost:8080"],
    "labels": {
      "job": "automation-scripts",
      "environment": "production"
    }
  }
]
'''
    
    with open(targets_config, "w") as f:
        f.write(targets_content)
    print(f"   ‚úÖ Created: {targets_config}")
    
    return True


def create_automation_documentation() -> bool:
    """Create documentation for automation setup."""
    print("\nüìö Creating automation documentation...")
    
    docs_dir = Path("docs/automation")
    docs_dir.mkdir(exist_ok=True)
    
    automation_guide = docs_dir / "AUTOMATION_GUIDE.md"
    guide_content = '''# Automation Setup Guide

## Overview

This guide covers the automated tasks and monitoring setup for Claude Code Manager.

## Automated Tasks

### Daily Tasks
- **Metrics Collection**: Collects system, application, and repository metrics
- **Data Backup**: Backs up configuration, data, and metrics
- **Health Checks**: Monitors system health and application status

### Weekly Tasks
- **Maintenance**: Cleans temporary files, rotates logs, checks dependencies
- **Security Updates**: Checks for and reports security updates
- **Performance Analysis**: Analyzes performance trends and generates reports

## Setup Options

### Option 1: Cron Jobs (Recommended for single-user systems)

```bash
# Install cron jobs
crontab automation/crontab.txt

# Verify installation
crontab -l
```

### Option 2: Systemd Services (Recommended for multi-user systems)

```bash
# Install services (requires sudo)
sudo automation/systemd/install-services.sh

# Check status
sudo systemctl status claude-manager-metrics.timer
sudo systemctl status claude-manager-health.timer
```

## Monitoring

### Log Files
- **Cron logs**: `logs/cron.log`
- **Application logs**: `logs/app.log`
- **Maintenance logs**: `logs/maintenance.log`

### Metrics
- **Collection frequency**: Daily
- **Storage location**: `performance_data/`
- **Retention**: 30 days

### Health Checks
- **Frequency**: Every 15 minutes (systemd) or 6 hours (cron)
- **Checks**: Disk space, application health, container status

## Troubleshooting

### Common Issues

1. **Scripts not executing**
   - Check file permissions: `ls -la automation/`
   - Verify cron service: `sudo systemctl status cron`

2. **High disk usage alerts**
   - Clean old logs: `find logs/ -name "*.log" -mtime +7 -delete`
   - Clean old metrics: `find performance_data/ -name "*.json" -mtime +30 -delete`

3. **Failed health checks**
   - Check application status: `python3 src/health_check.py`
   - Review application logs: `tail -f logs/app.log`

### Manual Execution

```bash
# Run metrics collection manually
./automation/daily-metrics.sh

# Run maintenance manually
./automation/weekly-maintenance.sh

# Run health check manually
./automation/health-check.sh

# Run backup manually
./automation/backup-data.sh
```

## Configuration

### Environment Variables
- `AUTOMATION_ENABLED`: Enable/disable automation (default: true)
- `METRICS_RETENTION_DAYS`: Metrics retention period (default: 30)
- `BACKUP_RETENTION_DAYS`: Backup retention period (default: 14)

### Customization
Edit automation scripts in the `automation/` directory to customize:
- Collection frequency
- Cleanup policies
- Alert thresholds
- Backup destinations

## Security

### File Permissions
Ensure proper file permissions for automation scripts:
```bash
chmod 755 automation/*.sh
chmod 644 automation/crontab.txt
```

### Log Rotation
Logs are automatically rotated to prevent disk space issues:
- Application logs: 7 days retention
- Cron logs: 30 days retention
- Maintenance logs: 90 days retention
'''
    
    with open(automation_guide, "w") as f:
        f.write(guide_content)
    print(f"   ‚úÖ Created: {automation_guide}")
    
    return True


def main():
    """Main automation setup function."""
    print("‚öôÔ∏è Claude Code Manager - Automation Setup")
    print("=" * 50)
    
    # Check system requirements
    requirements = check_system_requirements()
    
    # Create directories
    print("\nüìÅ Creating automation directories...")
    for directory in ["automation", "logs", "backups", "performance_data"]:
        Path(directory).mkdir(exist_ok=True)
        print(f"   ‚úÖ Created: {directory}/")
    
    # Setup tasks
    setup_tasks = [
        ("Automation Scripts", create_automation_scripts),
        ("Cron Jobs", lambda: setup_cron_jobs(requirements)),
        ("Systemd Services", lambda: create_systemd_services(requirements)),
        ("Monitoring Setup", create_monitoring_setup),
        ("Documentation", create_automation_documentation),
    ]
    
    results = []
    for task_name, task_func in setup_tasks:
        try:
            result = task_func()
            results.append((task_name, result))
        except Exception as e:
            print(f"‚ùå Error in {task_name}: {e}")
            results.append((task_name, False))
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä AUTOMATION SETUP SUMMARY")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for task_name, result in results:
        status = "‚úÖ COMPLETED" if result else "‚ùå FAILED"
        print(f"{status} {task_name}")
        if result:
            passed += 1
    
    print(f"\nResults: {passed}/{total} tasks completed successfully")
    
    if passed == total:
        print("üéâ AUTOMATION SETUP COMPLETE!")
        print("\nüìù Next steps:")
        print("1. Choose automation method (cron or systemd)")
        print("2. Install automation services:")
        if requirements["cron"]:
            print("   - Cron: crontab automation/crontab.txt")
        if requirements["systemctl"]:
            print("   - Systemd: sudo automation/systemd/install-services.sh")
        print("3. Monitor logs in logs/ directory")
        print("4. Review automation documentation in docs/automation/")
        return 0
    else:
        print(f"‚ö†Ô∏è  {total - passed} tasks failed")
        print("Review the errors above and retry setup")
        return 1


if __name__ == "__main__":
    sys.exit(main())